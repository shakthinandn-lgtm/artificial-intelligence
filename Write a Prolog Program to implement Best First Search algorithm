% ----------------------------
% FACTS: Graph edges with cost
% ----------------------------

edge(a, b, 1).
edge(a, c, 1).
edge(b, d, 1).
edge(b, e, 1).
edge(c, f, 1).
edge(c, g, 1).

% ----------------------------
% FACTS: Heuristic values
% (Estimated cost from node to goal)
% ----------------------------

heuristic(a, 6).
heuristic(b, 4).
heuristic(c, 4).
heuristic(d, 2).
heuristic(e, 2).
heuristic(f, 1).
heuristic(g, 0).   % Goal node has heuristic 0

% ----------------------------
% Best First Search
% ----------------------------

best_first_search(Start, Goal, Path) :-
    bfs([[Start]], Goal, Path).

% Case 1: Path found
bfs([[Goal | Rest] | _], Goal, Path) :-
    reverse([Goal | Rest], Path).

% Case 2: Expand next node
bfs([[Current | Rest] | OtherPaths], Goal, Path) :-
    findall([Next, Current | Rest],
            (edge(Current, Next, _),
             \+ member(Next, [Current | Rest])),
            NewPaths),
    evaluate_paths(NewPaths, ScoredPaths),
    append(OtherPaths, ScoredPaths, UpdatedPaths),
    sort(2, @=<, UpdatedPaths, SortedPaths),  % sort by heuristic
    strip_scores(SortedPaths, CleanPaths),
    bfs(CleanPaths, Goal, Path).

% Assign heuristic score to each path
evaluate_paths([], []).
evaluate_paths([[Node | Path] | Rest], [[ [Node | Path], H ] | ScoredRest]) :-
    heuristic(Node, H),
    evaluate_paths(Rest, ScoredRest).

% Remove scores and keep only paths
strip_scores([], []).
strip_scores([[Path, _] | Rest], [Path | CleanRest]) :-
    strip_scores(Rest, CleanRest).
