import itertools

def travelling_salesman(graph, start):
    # graph is a distance matrix
    vertices = list(range(len(graph)))
    vertices.remove(start)

    min_path = float('inf')
    best_route = None

    # Check all possible permutations of cities
    for perm in itertools.permutations(vertices):
        current_cost = 0
        k = start

        # Sum cost of this route
        for j in perm:
            current_cost += graph[k][j]
            k = j
        current_cost += graph[k][start]  # return to start

        # Update best route
        if current_cost < min_path:
            min_path = current_cost
            best_route = (start,) + perm + (start,)

    return min_path, best_route

# Example usage
if __name__ == "__main__":
    # Distance matrix (symmetric graph)
    graph = [
        [0, 10, 15, 20],
        [10, 0, 35, 25],
        [15, 35, 0, 30],
        [20, 25, 30, 0]
    ]

    cost, route = travelling_salesman(graph, 0)
    print("Minimum cost:", cost)
    print("Best route:", route)
