import heapq

# Directions for blank movement (up, down, left, right)
moves = [(-1,0),(1,0),(0,-1),(0,1)]

class PuzzleState:
    def __init__(self, board, parent=None, move="", depth=0, cost=0):
        self.board = board
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = cost  # f(n) = g(n) + h(n)

    def __lt__(self, other):
        return self.cost < other.cost

# Manhattan Distance Heuristic
def manhattan_distance(board, goal):
    distance = 0
    for i in range(3):
        for j in range(3):
            val = board[i][j]
            if val != 0:
                goal_x, goal_y = divmod(goal.index(val), 3)
                distance += abs(goal_x - i) + abs(goal_y - j)
    return distance

# Generate possible next states
def get_neighbors(state, goal):
    neighbors = []
    x, y = [(ix, iy) for ix, row in enumerate(state.board) for iy, i in enumerate(row) if i == 0][0]
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_board = [list(row) for row in state.board]
            new_board[x][y], new_board[nx][ny] = new_board[nx][ny], new_board[x][y]
            flat_new = sum(new_board, [])
            h = manhattan_distance(new_board, sum(goal, []))
            neighbors.append(PuzzleState(new_board, state, move=f"({x},{y})->({nx},{ny})", 
                                         depth=state.depth+1, cost=state.depth+1+h))
    return neighbors

# A* Search
def solve_puzzle(start, goal):
    open_set = []
    closed_set = set()
    start_state = PuzzleState(start, cost=manhattan_distance(start, sum(goal, [])))
    heapq.heappush(open_set, start_state)

    while open_set:
        current = heapq.heappop(open_set)
        if current.board == goal:
            path = []
            while current.parent:
                path.append(current.move)
                current = current.parent
            return path[::-1]

        closed_set.add(tuple(sum(current.board, [])))
        for neighbor in get_neighbors(current, goal):
            if tuple(sum(neighbor.board, [])) not in closed_set:
                heapq.heappush(open_set, neighbor)

    return None

# Example usage
if __name__ == "__main__":
    start = [
        [1, 2, 3],
        [4, 0, 6],
        [7, 5, 8]
    ]
    goal = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 0]
    ]
    
    solution = solve_puzzle(start, goal)
    if solution:
        print("Solution found in", len(solution), "moves:")
        for step in solution:
            print(step)
    else:
        print("No solution exists.")
